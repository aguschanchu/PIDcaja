Importante: Si hay corridas faltantes, se asume que se utilizó la misma configuración
anterior, salvo, el setpointo el uso o no de autotunning

Corrida 9: Había un error en Atune_pde.d no, al mandar el output de la
salida del PID, al Arduino. Faltaba el caso output==0

Corrida 10: Mismo código que corrida 9, utilizando como setpoint 15, es decir, una temperatura más cercana al ambiente
La razón para tal medicion, fue, que creíamos que al estar más cercano a la temperatura ambiente, iba a ser más
necesario para el sistema de control, calentar al sistema. Queríamos estudiar esta necesidad, o no, utilizando tal
setpoint, pero, únicamente permitiendole que enfríe

Corrida 11: Como una primera hipótesis para intentar remover los "picos" en la potencia en función del tiempo, que dan
problemas a temperas bajas (haciendo necesario parches, como el permiterle únicamente que enfríe), modificamos el
input del PID y AutoTune, para que cada medición de temperatura, la realice con un promedio. Es decir, cada vez
que el sistema de control solicite la temperatura, mida 1 vez, espere 10ms, mida nuevamente y sume el resultado
al anterior... y así, luego de 10 mediciones, divida por diez y entregue este valor al PID.
Nuevamente se permitio que el sistema enfríe y caliente, utilizando u Ostep de 255, y setpoint de 40

Corrida 12: Evidentemente el promedio no estaba funcionando en la corrida 12. Se agrego la espera de 100ms entre medicion
y medicion, que... no había sido agregada. Además, subi el sampletime del PID a 2s

Corrida 13: Se limpió parte del código (aún hay mucho por hacer). Asimismo, se cambio el algoritmo de PID, en el calculador
de derivadas. Antes, bajo la hipotesis de que siempre corria en forma periódica, cada SampleTime, se "simplificaba"}
de todas las cuentas el SampleTime (en el calculo de derivada, de DeltaErr/DeltaTiempo). Como esta hipotesis no parece
ser válida, se agregó un contador de tiempo, para que el DeltaTiempo que se utilice para calcular la dereivada,
sea lo que tiene que ser.
Se agrego el leer-serial, así como el graficador al proyecto. Al primero, además de funcionar como datalogger, se agrego
una interfaz de control con una fuente de DC, a la que están conectadas dos resistencia de 4.7Ohm en serie.
La idea es replicar las pertubaciones que observabamos en mediciones anteriores, en la temperatura ambiente.

Corrida17: Se aumentó el número de puntos que se considera en el promedio de 10 med espaciadas 100ms, a 100, espaciadas 50ms

Corrida18: Se disminuyó el número de ptos para el premedio, nuevamente a 10, con 100ms de espaciado; dejando el resto de los
parametros constantes. La idea es, a través de esta medición, la anterior, y la proxima (sin promedio); de evaluar el
impacto del mismo, y así optar por la configuración definitiva.

Corrida19: Se disminuyó el número de ptos para el promedio a 1 (ie, sin promedio). Asimismo, se cambió el código del autotune (pese
a que en esta corrida, no se utilizó). El autotune utiliza la amplitud y período de las oscilaciones que genera. La amplitud, la mide
a partir de la diferencia entre el máximo y mínimo global de todos los valores que se dan durante el autotuneo. Sin embargo,
si el autotuneo comienza de un punto que dista bastante del setpoint, esto hace que la diferencia entre el máximo y mínimo sea enorme,
y no se corresponde con la amplitud de la oscilación.
Esta corrección, fue inspirada en las diferencia que había al ejecutar un autotune, entre un caso en donde el setpoint era cercano
al valor inicial, y otro en donde no. Por ejemplo, un caso particular, se trata de las corridas 12 y 11 respectivamente. Los resultados fueron:
kp: 324.68 ki: 2.47 kd: 10683.39 (Corrida 12)
kp: 15.17 ki: 0.11 kd: 514.57 (Corrida 11)
Análogamente, a temperaturas bajas
kp: 302.61 ki: 1.08 kd: 21121.99 (Autotuneo con TempInicial=setpoint, corrida eliminada)
kp: 26.58 ki: 0.08 kd: 2226.92 (Corrida 16)
La forma de parchear este problema, es, una vez que se haya encontrado dos picos, reinicia el valor de absMax y absMin. Así, mide la amplitud
de la oscilacion, a partir del 2do pico.

Corrida20: Se aumentó el número de ptos de promedio, a 500, con 20ms de intervalo entre medición

Corrida 22: Se agregó un sensor adicional, y se cambio la diposición de los mismos, utilizando una estructura plástica centrada;
para replicar la distribución espacial a la que estará sometida la muestra (a diferencia de los sensores en las esquinas,
como se encontraba antes). Se utiliza como sensor de control el que se encuentran en el medio (llamado 0, en esta nueva disposición).
Además, como se había colgado el graficador en la corrida buscadorK 5 (o bien, estaba usando 2GB RAM), se agregó un pequeño código para
limpiar variables.

Corrida 23: Se realizó una correción en Atune_pde.ino, a la hora de realizar la medición de control. La razón, es que se disminuyó
la cantidad de puntos que se utiliza en el promedio durante el autotune. La razón, (creemos) es que de ser un número muy grande, fallaba el
contador de picos, ya que el mismo espera que un punto dado sea mayor a un entorno de puntos, para considerarlo un máximo local (y, por lo
tanto un extremo de un pico, en lugar de ruido). Si el promedio es muy grande, como cada medición le tomaría más tiempo, esto
hace que tenga menos puntos entre pico y pico, haciendo que dos de ellos caigan en el entorno de búsqueda de picos, considerando
a todos como ruido, y por lo tanto, no detectando ninguno.

Corrida 24: El código no fue alterado. No estaba prendido el CH1 de la fuente. Simplemente, a través de python, le enviamos
inst.write("OUTPut CH1, ON")

Corrida 25: Se cambió leer_serial y Atune_PDE para utilizar el reloj de Arduino (via millis) en lugar de el reloj de Python para almacenar
los valores de las mediciones de todos los sensores. Asímismo, se implementó una función en Atune_PDE para controlar la resistencia
cerámica desde Arduino.

En preparaciones para corridas con SiPM, se agrego una funcion para calcular los Kes a partir de los datos obtenidos
de la 5ta corrida de buscadoresK, y un ajuste polinomico via cuadrados minimos
